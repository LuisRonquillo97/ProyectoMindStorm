<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAiYAAAF1CAYAAADcPCGCAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAL
        EQAACxEBf2RfkQAAC/ZJREFUeF7t3duPXXUZx2H/CjxFiRaMShRaWxotYANalVhAjI0k1tAoFNvQ1hKM
        qImKCRoxaqLxcMGFF9ULL5oYjIcYxZAgIjZivGkjBI2GROlBLVqCsp13nF33rFl7Zh87385+nuRNO3uv
        vWiGi/lk/X5rzQs6AAAhhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        hAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOY
        AAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkA
        EEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        hAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOY
        AAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkA
        EEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        hAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOY
        AAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkA
        EEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        hAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOY
        AAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkA
        EEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        hAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOY
        AAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkA
        EEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        hAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOY
        AAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkA
        EEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        hAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOY
        AAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkA
        EEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        hAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOY
        AAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkA
        EEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAxhAkAEEOYAAAx
        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
</value>
  </data>
</root>